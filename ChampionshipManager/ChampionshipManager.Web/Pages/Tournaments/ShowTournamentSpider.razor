@using ChampionshipManager.Db.Models
@using ChampionshipManager.BusinessLayer.Services

@inject TournamentService TournamentService
@inject GameService GameService

<div class="row">
    <div class="responsiveColumn" style="font-size: larger">

        <h3>Statistics</h3>
        @{
            var places = GetPlaces();
            var firstPlace = places.Item1;
            var secondPlace = places.Item2;
            var thirdPlace = places.Item3;

            <h4>1st place</h4>
            foreach (var place in firstPlace)
            {
                <span style="padding-left: 10px">@place</span>
            }
            <br/>

            <h4>2nd place</h4>
            foreach (var place in secondPlace)
            {
                <span style="padding-left: 10px">@place</span>
            }
            <br/>

            <h4>3rd place</h4>
            foreach (var place in thirdPlace)
            {
                <span style="padding-left: 10px">@place</span>
            }
            <br/>
        }
        <br/>
        <br/>

        <h3>Matches</h3>
        @{
            int round = 0;
            while (Games.Any(g => g.Round == round))
            {
                <h4>Round @round</h4>

                @foreach (var game in Games.FindAll(g => g.Round == round))
                {
                    <button style="font-size: large;width: 250px" @onclick="@(() => SelectGame(game))">
                        <span>@(game.PlayerOne?.Name ?? (game.Winner == null ? "TBD" : "free pass"))</span> vs <span>@(game.PlayerTwo?.Name ?? (game.Winner == null ? "TBD" : "free pass"))</span>
                        <br/>
                        @if (game.PlayerOneScore != 0 || game.PlayerTwoScore != 0)
                        {
                            <span>@game.PlayerOneScore</span>
                            <span>:</span>
                            <span> @game.PlayerTwoScore </span>
                        }
                        else
                        {
                            <span>? : ?</span>
                        }
                    </button>
                }


                round++;
            }
        }


    </div>

    <div class="responsiveColumn second" style="font-size: larger">
        @if (SelectedGame != null)
        {
            <EditGame Refresh="@UpdatedGame" SelectedGame="@SelectedGame"></EditGame>
        }

    </div>

</div>


@code{

    [Parameter]
    public string TournamentId { get; set; }

    private List<Game> Games;

    private Game SelectedGame = null;

    protected override void OnInitialized()
    {
        Games = GameService.GetByTournamentIdWithIncludes(TournamentId);
        TournamentService.ProcessSpiderGamesAndEdit(TournamentId);
    }

    private void UpdatedGame()
    {
        TournamentService.ProcessSpiderGamesAndEdit(TournamentId);
        StateHasChanged();
    }

    private void SelectGame(Game game)
    {
        SelectedGame = game;
        StateHasChanged();
    }

    private Tuple<List<string>, List<string>, List<string>> GetPlaces()
    {
        var result = new Tuple<List<string>, List<string>, List<string>>(new List<string>(), new List<string>(), new List<string>());
        var counted = Games
            .GroupBy(
                g => g.Winner,
                g => 1,
                (_winner, _winCount) => new {winner = _winner, winCount = _winCount.Sum()}
            ).ToList();

        counted.RemoveAll(w => w.winner == null);

        var firstPlace = counted.Where(r => r.winCount == counted.Max(w => w.winCount)).ToList();
        result.Item1.AddRange(firstPlace.Select(w => w.winner?.Name ?? ""));
        counted.RemoveAll(i => firstPlace.Contains(i));

        var secondPlace = counted.Where(r => r.winCount == counted.Max(w => w.winCount)).ToList();
        result.Item2.AddRange(secondPlace.Select(w => w.winner?.Name ?? ""));
        counted.RemoveAll(i => secondPlace.Contains(i));

        var thirdPlace = counted.Where(r => r.winCount == counted.Max(w => w.winCount)).ToList();
        result.Item3.AddRange(thirdPlace.Select(w => w.winner?.Name ?? ""));
        counted.RemoveAll(i => thirdPlace.Contains(i));

        return result;
    }

}