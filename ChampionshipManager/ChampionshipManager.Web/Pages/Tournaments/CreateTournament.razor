@page "/CreateTournament/{ChampionshipId}"
@using ChampionshipManager.Db.Models

@using ChampionshipManager.Web.Pages.Components
@using ChampionshipManager.BusinessLayer.Services

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@inject ChampionshipService ChampionshipService
@inject TournamentService TournamentService

Create new tournament

<EditForm Model="@_tournament" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <InputText id="name" @bind-Value="_tournament.Name"/>
    <InputSelect id="tournamentType" @bind-Value="_tournament.TournamentType">
        @foreach (var item in Enum.GetNames(typeof(TournamentType)))
        {
            <option value="@item">@item</option>
        }
    </InputSelect>

    <SelectMultipleCompetitorsComponent Selected="@Selected" ></SelectMultipleCompetitorsComponent>

    <button type="submit">Submit</button>
</EditForm>


@code{

    [Parameter]
    public string ChampionshipId { get; set; }
    
    public List<Competitor> Selected { get; set; } = new List<Competitor>();

    private readonly Tournament _tournament = new Tournament();

    protected override void OnInitialized()
    {
        SetupTournamentForCreation();
    }

    private void SetupTournamentForCreation()
    {
        var championship = ChampionshipService.GetWithCompetitors(ChampionshipId);
        
        Selected.AddRange(championship.Competitors);
        _tournament.Championship = championship;
        _tournament.Competitors = new List<Competitor>();
        _tournament.Games = new List<Game>();
        _tournament.IsFinished = false;
    }

    private void HandleValidSubmit()
    {
        _tournament.Competitors = Selected;
        var id = TournamentService.Create(_tournament);
        NavigationManager.NavigateTo($"Tournament/{ChampionshipId}/{id.ToString()}");
    }

}