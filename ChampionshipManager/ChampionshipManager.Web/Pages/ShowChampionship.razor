@page "/Championship/{Id}"
@using ChampionshipManager.Db.Models
@using ChampionshipManager.Db.Repository
@using ChampionshipManager.BusinessLayer.Services
@using ChampionshipManager.Web.Utils


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject OrganizerService OrganizerService
@inject ChampionshipRepository ChampionshipRepository

@if (CurrentChampionship == null)
{
    <div>Something went wrong, please go <a href="/Championships">back</a></div>
}
else
{
    <h3>@CurrentChampionship.Name</h3>
    <a href="/CreateTournament/@CurrentChampionship.ID.ToString()">Create new Tournament</a>
    <h4>People</h4>   
    @foreach (var person in CurrentChampionship.Competitors)
    {
        <div style="padding-left: 5em">@person.Name</div>
    }
    <h4>Tournaments in progress</h4>
@foreach (var tournament in CurrentChampionship.Tournaments.Where(t => !t.IsFinished))
{
    <a href = "/Tournament/@tournament.ID" style="padding-left: 5em">@tournament.Name</a>
}

    <h4>Tournaments finished</h4>
@foreach (var tournament in CurrentChampionship.Tournaments.Where(t => t.IsFinished))
{
    <a href = "/Tournament/@tournament.ID" style="padding-left: 5em">@tournament.Name</a>
}
}


@code{
    [Parameter]
    public string Id { get; set; }

    private Championship CurrentChampionship { get; set; }

    
    protected override async Task OnInitializedAsync()
    {
        var identity = await AuthenticationStateProvider.GetUserIdentity();
        CurrentChampionship = OrganizerService.GetChampionshipWithIncludes(identity, Id);
        
        // var organizerId = OrganizerService.GetIdByName(await AuthenticationStateProvider.GetUserIdentity());
        //
        // if (Guid.TryParse(Id, out Guid parsedId))
        // {
        //     CurrentChampionship = OrganizerService.GetChampionships(organizerId).SingleOrDefault(c => c.ID == parsedId); //ChampionshipRepository.FilterWithIncludes(c => c.ID == parsedId && c.Organizer.ID == organizerId).SingleOrDefault();
        // }
    }

}