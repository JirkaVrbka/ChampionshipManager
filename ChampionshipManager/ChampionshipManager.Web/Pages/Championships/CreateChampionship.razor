@using ChampionshipManager.Db.Models
@using ChampionshipManager.BusinessLayer.Services
@using ChampionshipManager.Web.Utils
@using ChampionshipManager.Web.Pages.Components

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@inject ChampionshipService ChampionshipService
@inject OrganizerService OrganizerService


<EditForm Model="@_championship" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="row">
        <div class="responsiveColumn" style="font-size: larger">
            <div style="font-size: x-large">Create new championship</div>
            <br/>
            <div>Name</div>
            <br/>
            <div>Selected</div>
            <br/>
            <div class="multiple-selector-buttons">
                <button type="button" @onclick="DeselectAll">@removeAllText</button>
            </div>
            <ul>
                @foreach (var item in Selected)
                {
                    <li @onclick="@(() => Deselect(item))">@item.Name</li>
                }
            </ul>
        </div>

        <div class="responsiveColumn" style="font-size: larger">

            <div style="font-size: x-large">
                <button class="oi oi-check" type="submit" style="width: 250px">
                    <span style="padding-left: 10px">Add</span>
                </button>
            </div>
            <br/>

            <InputText id="name" @bind-Value="_championship.Name" placeholder="Name" style="width: 250px"/>

            <br/>
            <br/>
            <div>Unselected</div>
            <br/>
            <div class="multiple-selector-buttons">
                <button type="button" @onclick="SelectAll">@addAllText</button>
            </div>
            <ul>
                @foreach (var item in NoSelected)
                {
                    <li @onclick="@(() => Select(item))">@item.Name</li>
                }
            </ul>

        </div>

    </div>
</EditForm>


@code{

    [Parameter]
    public Action<Championship> OnCreated { get; set; }

    public List<Competitor> NoSelected { get; set; } = new List<Competitor>();
    public List<Competitor> Selected { get; set; } = new List<Competitor>();


    private string removeAllText = ">>";
    private string addAllText = "<<";


    private readonly Championship _championship = new Championship
    {
        IsFinished = false,
        Competitors = new List<Competitor>(),
        Tournaments = new List<Tournament>()
    };

    protected override async Task OnInitializedAsync()
    {
        var organizerName = await AuthenticationStateProvider.GetUserName();
        Selected.AddRange(OrganizerService.GetCompetitorsByName(organizerName));

        _championship.Organizer = OrganizerService.GetByName(organizerName);
    }

    private async Task HandleValidSubmit()
    {
        _championship.Competitors.AddRange(Selected);

        var id = await ChampionshipService.Create(_championship);
        var created = ChampionshipService.GetById(id);
        OnCreated.Invoke(created);
    }


    private void Select(Competitor item)
    {
        NoSelected.Remove(item);
        Selected.Add(item);
    }

    private void Deselect(Competitor item)
    {
        Selected.Remove(item);
        NoSelected.Add(item);
    }

    private void SelectAll()
    {
        Selected.AddRange(NoSelected);
        NoSelected.Clear();
    }

    private void DeselectAll()
    {
        NoSelected.AddRange(Selected);
        Selected.Clear();
    }

}