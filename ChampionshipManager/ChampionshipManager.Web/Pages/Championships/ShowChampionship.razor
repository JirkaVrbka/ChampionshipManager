@page "/Championship/{Id}"
@using ChampionshipManager.Db.Models
@using ChampionshipManager.BusinessLayer.Services
@using ChampionshipManager.Web.Utils
@using ChampionshipManager.Web.Pages.Tournaments


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ChampionshipService ChampionshipService
@inject TournamentService TournamentService


<AuthorizeView>
    <Authorized>

        <div class="row">
            <span class="responsiveColumn">
                <h2>@CurrentChampionship.Name <span>(Championship)</span></h2>

                <p>Championship to host tournaments</p>
                <br/>
                <div style="font-size: large">
                    <button class="oi oi-plus" style="font-size: large;width: 250px" @onclick="@(() => SelectTournament(null))">
                        <span style="padding-left: 10px">Add new tournament</span>
                    </button>
                </div>
                <br/>
                <br/>
                <h4>Tournament in progress</h4>
                @foreach (var tournament in CurrentChampionship.Tournaments.Where(c => !c.IsFinished))
                {
                    <div>
                    <button style="font-size: large;width: 250px;" @onclick="@(() => SelectTournament(tournament))">
                        <br/>
                        @tournament.Name
                        <br/>
                    </button>
                <a href="/Tournament/@CurrentChampionship.ID/@tournament.ID">
                    <button style="font-size: large;width: 50px">
                        <br/>
                        >>
                        <br/>
                    </button>
                </a>
                </div>
                }

                <br/>
                <br/>
                <h4>Tournament finished</h4>
                @foreach (var tournament in CurrentChampionship.Tournaments.Where(c => c.IsFinished))
                {
                    <div>
                <button style="font-size: large;width: 250px" @onclick="@(() => SelectTournament(tournament))">
                    <br/>
                    @tournament.Name
                    <br/>
                </button>
                </div>
                    
                }

            </span>
            <span class="responsiveColumn second">
                @if (SelectedTournament == null)
                {
                    <CreateTournament OnCreated="@((championship) => SelectTournament(championship))" ParentChampionship="@CurrentChampionship"/>
                }
                else
                {
                    <EditTournament Refresh="@StateHasChanged" SelectedTournament="@SelectedTournament" ParentChampionship="@CurrentChampionship"></EditTournament>
                    
                }
            </span>
        </div>

    </Authorized>


    <NotAuthorized>
        Please log in.
    </NotAuthorized>
</AuthorizeView>


@code{
    [Parameter]
    public string Id { get; set; }

    private Tournament SelectedTournament = null;
    
    private Championship CurrentChampionship { get; set; }

    
    protected override void OnInitialized()
    {
        CurrentChampionship = ChampionshipService.GetWithAllIncludes(Id);
    }
    
    private void SelectTournament(Tournament tournament)
    {
        SelectedTournament = tournament != null ? TournamentService.GetWithAllIncludes(tournament.ID) : null;
        StateHasChanged();
    }

}