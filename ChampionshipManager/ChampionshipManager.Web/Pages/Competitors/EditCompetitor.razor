@using ChampionshipManager.Db.Models
@using ChampionshipManager.BusinessLayer.Services
@using ChampionshipManager.Web.Utils

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CompetitorService CompetitorService
@inject OrganizerService OrganizerService


<EditForm Model="@SelectedCompetitor" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="row">
        <div class="responsiveColumn" style="font-size: larger">
            <div style="font-size: x-large">Details:</div>
            <br/>
            <div>Name</div>
            @if (_organizer.BirthEnabled)
            {
                <div>Date of birth</div>
            }
            @if (_organizer.GenderEnabled)
            {
                <div>Gender</div>
            }
            @if (_organizer.SkillsEnabled)
            {
                <div>Skill</div>
            }
            @if (_organizer.TeamsEnabled)
            {
                <div>Team</div>
            }
        </div>
        <div class="responsiveColumn">

            <div style="font-size: x-large">
                <button class="oi oi-check" type="submit" style="width: 250px">
                    <span style="padding-left: 10px">@(_editState ? "Save" : "Update")</span>
                </button>
                </div>
            <br/>
            
            <InputText id="name" @bind-Value="SelectedCompetitor.Name" placeholder="@SelectedCompetitor.Name" style="width: 250px" disabled="@(!_editState)"/>
            @if (_organizer.BirthEnabled)
            {
                <InputDate id="birth" @bind-Value="SelectedCompetitor.BirthDate" style="width: 250px; height: 28px" disabled="@(!_editState)"/>
            }
            @if (_organizer.GenderEnabled)
            {
                <InputSelect id="gender" @bind-Value="SelectedCompetitor.Gender" style="width: 250px; height: 28px" disabled="@(!_editState)">
                    @foreach (var item in Enum.GetNames(typeof(Gender)))
                    {
                        <option value="@item">@item</option>
                    }
                </InputSelect>
            }
            @if (_organizer.SkillsEnabled)
            {
                <InputSelect id="skill" @bind-Value="_skillId" style="width: 250px; height: 28px" disabled="@(!_editState)">
                    @foreach (var item in _organizer.Skills)
                    {
                        <option value="@item.ID.ToString()">@item.Name</option>
                    }
                </InputSelect>
            }
            @if (_organizer.TeamsEnabled)
            {
                <InputSelect id="team" @bind-Value="_teamId" style="width: 250px; height: 28px" disabled="@(!_editState)">
                    @foreach (var item in _organizer.Teams)
                    {
                        <option value="@item.ID.ToString()">@item.Name</option>
                    }
                </InputSelect>
            }

            <br/>
            
        </div>
    </div>
    
</EditForm>


@code{

    [Parameter]
    public Action Refresh { get; set; }

    [Parameter]
    public Competitor SelectedCompetitor { get; set; }

    private bool _editState = false;
    

    private Organizer _organizer;

    private string _skillId;
    private string _teamId;

    protected override async Task OnInitializedAsync()
    {
        _editState = false;
        var organizerName = await AuthenticationStateProvider.GetUserName();
        _organizer = OrganizerService.GetWithSkillsTeamsByName(organizerName);
        _skillId = SelectedCompetitor.Skill?.ID.ToString();
        _teamId = SelectedCompetitor.Team?.ID.ToString();
    }

    private async Task HandleValidSubmit()
    {
        if (_editState)
        {
            var organizerName = await AuthenticationStateProvider.GetUserName();
            SelectedCompetitor.Skill = OrganizerService.GetSkillByNameOrDefault(organizerName, _skillId);
            SelectedCompetitor.Team = OrganizerService.GetTeamByNameOrDefault(organizerName, _teamId);

            await CompetitorService.Edit(SelectedCompetitor);
        }

        _editState = !_editState;
        StateHasChanged();
        Refresh.Invoke();
    }
    

}