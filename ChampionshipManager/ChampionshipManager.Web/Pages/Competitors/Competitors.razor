@page "/Competitors"
@using ChampionshipManager.Db.Models
@using ChampionshipManager.BusinessLayer.Services
@using ChampionshipManager.Web.Pages.Components
@using ChampionshipManager.Web.Utils
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject OrganizerService OrganizerService

<AuthorizeView>
    <Authorized>

        <div class="row">
            <span class="responsiveColumn">
                <h2>Competitors:</h2>

                <p>People that can be selected to compete</p>
                <br/>
                <div style="font-size: large">
                    <button class="oi oi-plus" style="width: 250px" @onclick="@(() => SelectCompetitor(null))">
                        <span style="padding-left: 10px">Add new competitor</span>
                    </button>
                </div>
                <br/>
                <br/>
                @foreach (var competitor in _organizer.Competitors)
                {
                    <button style="font-size: large;width: 250px" @onclick="@(() => SelectCompetitor(competitor))">
                        <br/>
                        @competitor.Name
                        <br/>
                    </button>
                }

            </span>
            <span class="responsiveColumn second">
                @if (SelectedCompetitor == null)
                {
                    <CreateCompetitor Refresh="@StateHasChanged"/>
                }
                else
                {
                    <EditCompetitor Refresh="@StateHasChanged" SelectedCompetitor="@SelectedCompetitor"></EditCompetitor>
                }
            </span>
        </div>

    </Authorized>


    <NotAuthorized>
        Please log in.
    </NotAuthorized>
</AuthorizeView>

@code
{
    private Organizer _organizer;
    private Competitor SelectedCompetitor = null;

    protected override async Task OnInitializedAsync()
    {
        var organizerName = await AuthenticationStateProvider.GetUserName();
        _organizer = OrganizerService.GetWithCompetitorsByName(organizerName);
    }

    private void SelectCompetitor(Competitor competitor)
    {
        SelectedCompetitor = competitor;
        StateHasChanged();
    }
}