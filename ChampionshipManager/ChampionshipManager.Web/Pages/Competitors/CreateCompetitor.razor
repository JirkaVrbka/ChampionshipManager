@using ChampionshipManager.Db.Models
@using ChampionshipManager.BusinessLayer.Services
@using ChampionshipManager.Web.Utils

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CompetitorService CompetitorService
@inject OrganizerService OrganizerService

Create new competitor

<EditForm Model="@_competitor" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <InputText id="name" @bind-Value="_competitor.Name"/>

    @if (_organizer.BirthEnabled)
    {
        <InputDate id="birth" @bind-Value="_competitor.BirthDate"/>
    }
    @if (_organizer.GenderEnabled)
    {
        <InputSelect id="gender" @bind-Value="_competitor.Gender">
            @foreach (var item in Enum.GetNames(typeof(Gender)))
            {
                <option value="@item">@item</option>
            }
        </InputSelect>
    }
    @if (_organizer.SkillsEnabled)
    {
        <InputSelect id="skill" @bind-Value="_skillId">
            @foreach (var item in _organizer.Skills)
            {
                <option value="@item.ID.ToString()">@item.Name</option>
            }
        </InputSelect>
    }
    
    @if (_organizer.TeamsEnabled)
        {
            <InputSelect id="skill" @bind-Value="_teamId">
                @foreach (var item in _organizer.Teams)
                {
                    <option value="@item.ID.ToString()">@item.Name</option>
                }
            </InputSelect>
        }

    <button type="submit">Submit</button>
</EditForm>


@code{

    [Parameter]
    public Action Refresh { get; set; }

    private Organizer _organizer;
    private Competitor _competitor = new Competitor
    {
        Gender = Gender.Unknown,
    };
    private string _skillId;
    private string _teamId;

    protected override async Task OnInitializedAsync()
    {
        var organizerName = await AuthenticationStateProvider.GetUserName();
        _organizer = OrganizerService.GetWithSkillsTeamsByName(organizerName);
        SetUpNewCompetitor();
    }

    private async Task HandleValidSubmit()
    {
        var organizerName = await AuthenticationStateProvider.GetUserName();
        _competitor.Skill = OrganizerService.GetSkillByNameOrDefault(organizerName, _skillId);
        _competitor.Team = OrganizerService.GetTeamByNameOrDefault(organizerName, _teamId);
        
        CompetitorService.Create(_competitor);
        SetUpNewCompetitor();
        Refresh.Invoke();
    }

    private void SetUpNewCompetitor()
    {
        _competitor = new Competitor
        {
            Organizer = _organizer,
            Gender = Gender.Unknown
        };
    }

}